% The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
% 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
% Let us list the factors of the first seven triangle numbers:
%  1: 1
%  3: 1,3
%  6: 1,2,3,6
% 10: 1,2,5,10
% 15: 1,3,5,15
% 21: 1,3,7,21
% 28: 1,2,4,7,14,28
% We can see that 28 is the first triangle number to have over five divisors.
% What is the value of the first triangle number to have over five hundred divisors?

%Method 1
% hd_triangular_num:trianglenum_numberofdevisors(500).                Ans::76576500

-module(hd_triangular_num).
-export([trianglenum_numberofdevisors/1]).

trianglenum_numberofdevisors(NOD) -> trianglenum_numberofdevisors(NOD, 1).

trianglenum_numberofdevisors(NOD, NN) ->
    TriangleNum = summation_of(NN),
    NOF = number_of_devisors(TriangleNum),
    % io:format("TN:~w NOF:~w ~n", [TriangleNum, NOF]),
    case (NOD =< NOF) of
        true -> io:format("~w is the first triangle Number for N:~w with ~w devisors. ~n", [TriangleNum, NN, NOF]);
        false -> trianglenum_numberofdevisors(NOD, NN + 1)
    end.
%---------------------------------------------  Summation of a Number   ---------------------------------------------%
summation_of(N) when N > 0 -> N + summation_of(N - 1);
summation_of(0) -> 0.
%---------------------------------------------  Square root of a Number   ---------------------------------------------%
square_root_of(Num) -> square_root_of(Num, Num, 1).

square_root_of(N, X, Y) when (X - Y) > 0.001 ->
    A = (X + Y) / 2,
    B = N / A,
    square_root_of(N, A, B);
square_root_of(_, X, _) -> X.
%-------------------------------------------Number of devisors of a Number ------------------------------------------%
number_of_devisors(Num) -> number_of_devisors(1, Num, 0).

number_of_devisors(I, Num, DevisorsCount) ->
    SquareRoot = square_root_of(Num),
    case I =< SquareRoot of
        true when (Num rem I) =:= 0 -> number_of_devisors(I + 1, Num, DevisorsCount + 2);
        true -> number_of_devisors(I + 1, Num, DevisorsCount);
        false -> DevisorsCount end.

