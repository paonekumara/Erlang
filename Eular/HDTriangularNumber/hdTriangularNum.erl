% The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
% 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
% Let us list the factors of the first seven triangle numbers:
%  1: 1
%  3: 1,3
%  6: 1,2,3,6
% 10: 1,2,5,10
% 15: 1,3,5,15
% 21: 1,3,7,21
% 28: 1,2,4,7,14,28
% We can see that 28 is the first triangle number to have over five divisors.
% What is the value of the first triangle number to have over five hundred divisors?

%Method 1
% hdTriangularNum:triangleNumNumberOfDevisors1(500).                Ans::76576500

-module(hdTriangularNum).
-export([triangleNumNumberOfDevisors1/1]).

%%%%%  %%%%%  %%%%%  %%%%%  %%%%%  Summation of a Number %%%%%  %%%%%  %%%%%  %%%%%  %%%%%
summationOf(N) when N > 0 -> 
    N + summationOf(N - 1);
summationOf(0) -> 0.
%%%%%  %%%%%  %%%%%  %%%%%  %%%%%  Square root of a Number %%%%%  %%%%%  %%%%%  %%%%%  %%%%%

squareRootOf(Num) -> squareRootOf(Num, Num, 1).
squareRootOf(N, X, Y) ->
    if
        (X - Y) > 0.001 ->
            A = (X + Y) / 2,
            B = N / A,
            squareRootOf(N, A, B);
        true -> X end.

triangleNumNumberOfDevisors1(NOD) -> triangleNumNumberOfDevisors1(NOD, 1).

triangleNumNumberOfDevisors1(NOD, NN) ->

    TriangleNum = summationOf(NN),
    NOF = numberOfDevisors(TriangleNum),
    io:format("TN:~w NOF:~w ~n", [TriangleNum, NOF]),
    if
        NOD =< NOF ->
            io:format("~w is the first triangle Number for N:~w with ~w devisors. ~n", [TriangleNum, NN, NOF]);
        true -> triangleNumNumberOfDevisors1(NOD, NN + 1) end.



numberOfDevisors(Num) -> numberOfDevisors(1, Num, 0).
numberOfDevisors(I, Num, DevisorsCount) ->
    SquareRoot = squareRootOf(Num),
    if I =< SquareRoot ->
        if (Num rem I) =:= 0 -> numberOfDevisors(I + 1, Num, DevisorsCount + 2);
        true -> numberOfDevisors(I + 1, Num, DevisorsCount) end;
    true -> DevisorsCount end.


%Method 2

% triangleNumNumberOfDevisors(NOD) -> triangleNumNumberOfDevisors(NOD, 1).

% triangleNumNumberOfDevisors(NOD, NN) ->
%     TriangleNum = summationOf(NN),
%     NOF = numOfFactorsOf(TriangleNum),
%     io:format("TN:~w NOF:~w ~n", [TriangleNum, NOF]),
%     if
%         NOD =< NOF ->
%             io:format("~w is the first triangle Number for N:~w with ~w devisors. ~n", [TriangleNum, NN, NOF]);
%         true -> triangleNumNumberOfDevisors(NOD, NN + 1) end.

% %%%%%  %%%%%  %%%%%  %%%%%  %%%%%  Number of factors of a number %%%%%  %%%%%  %%%%%  %%%%%  %%%%%

% numOfFactorsOf(Num) -> numOfFactorsOf(2, Num, 2).
% numOfFactorsOf(_, Num, _) when Num =< 2 -> 
%     if 
%         Num =:= 2 -> 2;
%         Num =:= 1 -> 1;
%         true -> 0 end;

% numOfFactorsOf(I, Num, FactorsCount) ->
%     Q = Num div 2,
%     if I =< Q ->
%         Rem = Num rem I,
%         if Rem =:= 0 ->

%             numOfFactorsOf(I + 1, Num, FactorsCount + 1);
%         true -> numOfFactorsOf(I + 1, Num, FactorsCount) end;
%     true -> FactorsCount end.
