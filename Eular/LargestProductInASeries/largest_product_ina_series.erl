% The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
% 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

% Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

%Ans::  largest_product_ina_series:product_of_adjecent_digits(13).      Ans::23514624000

-module(largest_product_ina_series).
-export([product_of_adjecent_digits/1]).

product_of_adjecent_digits(AdjDigits) -> 
    Number = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450,
    Prod = product_of_adjecent_digits(Number, AdjDigits, 1, 1, Number, AdjDigits),
    io:format("Product::~w ~n", [Prod]).


product_of_adjecent_digits(0, 0, Result, LargestProduct, _, _) when Result > LargestProduct -> Result;
product_of_adjecent_digits(0, 0, _, LargestProduct, _, _) -> LargestProduct;

product_of_adjecent_digits(_, 0, Result, LargestProduct, OriginalNum, NumOfAdjDigits) when Result > LargestProduct ->
    product_of_adjecent_digits((OriginalNum div 10), NumOfAdjDigits, 1, Result, (OriginalNum div 10), NumOfAdjDigits);

product_of_adjecent_digits(_, 0, _, LargestProduct, OriginalNum, NumOfAdjDigits) ->
    product_of_adjecent_digits((OriginalNum div 10), NumOfAdjDigits, 1, LargestProduct, (OriginalNum div 10), NumOfAdjDigits);

product_of_adjecent_digits(Num, I, Result, LargestProduct, OriginalNum, NumOfAdjecentDigits) ->
    product_of_adjecent_digits(Num div 10, I - 1, Result * (Num rem 10), LargestProduct, OriginalNum, NumOfAdjecentDigits).
