% Each new term in the Fibonacci sequence is generated by adding the previous two terms.
% By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
% By considering the terms in the Fibonacci sequence whose values do not exceed four million,
% find the sum of the even-valued terms.

-module(fibonacci).
-export([main/1, sum/1, fibonacci/4, fibonacci/1]).

sum(L) -> sum(L, 0).

sum([H|T], Acc) -> 
    Temp = if
            H rem 2 =:= 0 -> H;
            true -> 0
        end,
    sum(T, Temp + Acc);
sum([], Acc) -> Acc.



fibonacci(N) -> 
    fibonacci(N, 0, 0, 0).

fibonacci(N, N, _, _) ->     [];
fibonacci(N, 0, _, _) ->     [0|fibonacci(N, 1, 0, 1)];
fibonacci(N, 1, _, _) ->     [1|fibonacci(N, 2, 1, 1)];
fibonacci(N, Current, X, Y) -> 
    A = Y + X,
    Z = if
            N > A -> A;
            true -> N
        end,
    [Y|fibonacci(N, Z, Y, A)].

main(N) -> 
    Series = fibonacci(N),
    TotalSum = sum(Series),
    io:format("Series::~w Total sum is:~w ~n", [Series, TotalSum]).












% fibonacci(N) -> 
%     fibonacci(N, 0, 0, 0).
%     % io:format("X:::~w ~n", [X]).

% fibonacci(N, N, _, _) -> 
%     % io:format("Current and Entered are same.~w ~n", [F]),
%     [];
% fibonacci(N, 0, _, _) -> 
%     % io:format("Current number is zero.~n"),
%     % fibonacci(N, 1, 0, 1);
%     [0|fibonacci(N, 1, 0, 1)];
% fibonacci(N, 1, _, _) -> 
%     % io:format("Current number is one.~n"),
%     % fibonacci(N, 2, 1, 1);
%     [1|fibonacci(N, 2, 1, 1)];
% fibonacci(N, Current, X, Y) -> 
%     % io:format("Current:::~w.~n", [Current]),
%     A = Y + X,
%     Z = if
%             N > A -> A;
%             true -> N
%         end,
%     % io:format("A:::~w z::~w Y::~w.~n", [A, Z, Y]),
%     % fibonacci(N, Current + 1, Y, Y + X).
%     [Y|fibonacci(N, Z, Y, A)].